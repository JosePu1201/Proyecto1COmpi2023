package com.mycompany.servidor_boxworold.lexer.cup;
import com.mycompany.servidor_boxworold.Juego.*;
import java_cup.runtime.*;
import java.util.*;
parser code {:

        public ArrayList<String> nombre  = new ArrayList<>(); ;
	public ArrayList<Integer> filas = new ArrayList<>();;
	public ArrayList<Integer> columnas = new ArrayList<>();;
	public ArrayList<String> colorCajaFuera  = new ArrayList<>();// "#ffff00";
	public ArrayList<String> colorCajasEnAlmacen  = new ArrayList<>();// "#fe0002";
	public ArrayList<String> colorAlmace  = new ArrayList<>();// "#d6fe0a";
	public ArrayList<String> colorPared  = new ArrayList<>();// "#bdbebf";
	public ArrayList<String> colorCamino  = new ArrayList<>();// "#0001ff";
	public ArrayList<String> colorLugarNoDefinido  = new ArrayList<>();// "#303030";
	public ArrayList<String> colorJugador  = new ArrayList<>();// "#ff00f7";
	public ArrayList<Jugador> jugador1 = new ArrayList<>();;
	public ArrayList<Caja> cajas = new ArrayList<>();
	public ArrayList<Almacen> almacen = new ArrayList<>();
	public ArrayList<Casillas> casillas = new ArrayList<>();

        private Mundo mundoTemp = new Mundo();

        Casillas casillaTemp = new Casillas();
        Caja cajaTemp = new Caja();
        Almacen almacenTemo = new Almacen();
        Jugador jugadorTemp = new Jugador();
        public void set(){
            mundoTemp.setAlmacen(almacen);
            mundoTemp.setCajas(cajas);
            mundoTemp.setColorAlmace(colorAlmace);
            mundoTemp.setColorCajaFuera(colorCajaFuera);
            mundoTemp.setColorCajasEnAlmacen(colorCajasEnAlmacen);
            mundoTemp.setColorCamino(colorCamino);
            mundoTemp.setColorJugador(colorJugador);
            mundoTemp.setColorLugarNoDefinido(colorLugarNoDefinido);
            mundoTemp.setColorPared(colorPared);
            mundoTemp.setColumnas(columnas);
            mundoTemp.setFilas(filas);
            mundoTemp.setJugador(jugador1);
            mundoTemp.setNombre(nombre);
            mundoTemp.setCasillas(casillas);
            imprimir();
            mundoTemp.imprimir();
        }
        public int castEntero(Object a){
                int num = -1;
                      	try{
				double numa = Double.parseDouble(casteo(a));
                                num = (int) numa;
			}
			catch(Exception i){
                                System.out.println("no se pudo y l");              
			}  
                return num;
        }
                public void imprimir(){
            imprimirArray(nombre);
            imprimirArray(colorCajaFuera);
            imprimirArray(colorCajasEnAlmacen);
            imprimirArray(colorAlmace);
            imprimirArray(colorPared);
            imprimirArray(colorCamino);
            imprimirArray(colorLugarNoDefinido);
            imprimirArray(colorJugador);
            imprimirInteger(filas);
            imprimirInteger(columnas);
            
            for (Jugador object : jugador1) {
                    System.err.println(object.toString());
            }
            for (Caja caja : cajas) {
                System.err.println(caja.toString());
            }
            for (Almacen almacen1 : almacen) {
                System.err.println(almacen1.toString());
            }
            for (Casillas casilla : casillas) {
                System.err.println(casilla.toString());
            }
            
        }
        public void imprimirInteger(ArrayList<Integer> entrada){
                for (
                        Integer object : entrada) {
                        System.out.println(object);
                }

        }
        public void imprimirArray(ArrayList<String> entrada){
        
            for (String object : entrada) {
                System.out.println(object);
            }
            
        }
	public String casteo(Object o){
		String salida = "";
			try{
				salida = o.toString();
			}
			catch(Exception i){
				salida = "Error";
			}
		return salida;
	}

        public double casteoNumero(Object num) {
                double numero = 0;
                try {
                        String numeroE = num.toString();
                        numero = Double.parseDouble(numeroE);
                } catch (Exception i) {
                        System.err.println("error");
                }

                return numero;

        }
        private Integer casteoInteger (Object num){
                Integer numero = 0;
                try {
                        String numeroE = num.toString();
                        numero = Integer.valueOf(numeroE);
                } catch (Exception i) {
                        System.err.println("error");
                }

                return numero;
        }
        public Mundo getMundoTemp() {
        return mundoTemp;
        }

        public void setMundoTemp(Mundo mundoTemp) {
        this.mundoTemp = mundoTemp;
        }

:};
//   
 terminal COMILLAS, DOSPUNTOS, COMA, NOMBRE, FILA, COLUMNA, ID,  NUMERO, HEXADECIMAL, LLAVEABIERTA, COLOR_JUGADOR, LLAVECERRADA, BRICK_COLOR, HALL_COLOR, UNDEFINED_COLOR, BOX_COLOR, BOX_ONT_TAGET_COLOR, TARGET_COLOR, 
BOARD, CORCHETEABIERTO, CORCHETECERRADO, POSX, POSY,TYPE, CONFIG,TARGETS,PLAYER,DECIMAL, MAS, MENOS, DIAGONAL,MULTIPLICAR,POTENCIA,PARENTESISCERRADO,PARENTESISABIERTO,RAIZ,HALL,BRICK,BOXES;

 non terminal inicio, desicion, nombre1 , col , filas, confi, nose, colorCajaFuera, colorCajaAlmacen, colorAlamacen, colorPared, colorCamino, noDefinido, colorJugador, colore, algo, otraCosa,tipo, opNum,
 info , board,targets, algomas,infoTarjeta, infoExactaTarjeta, posTarjeta, posJugador,ePosJ, posXJ,posYJ,player,a, b, c, d, decisiones,eHex,l,pos,posEjes;
non terminal tipo1,boxes,box,caja,posCaja,estruct1,posEjes1;
//INICIO
 inicio ::= LLAVEABIERTA decisiones LLAVECERRADA{:/*imprimir();*/set();:}
            ;
//arreglar el tema de los numeros 
nombre1  ::=    COMILLAS NOMBRE COMILLAS DOSPUNTOS COMILLAS ID:id COMILLAS  {:nombre.add(casteo(id));:}
            ;
filas   ::=    COMILLAS FILA COMILLAS DOSPUNTOS COMILLAS opNum:numero COMILLAS  {:filas.add(castEntero(numero));:}
            ;
col     ::=     COMILLAS COLUMNA COMILLAS DOSPUNTOS COMILLAS opNum:numero COMILLAS  {:columnas.add(castEntero(numero));:}
            ;

decisiones      ::=     decisiones COMA desicion {::}
                |       desicion {::}
                ;

desicion        ::=     nombre1 {:System.out.println("nombre");:}
                |       filas {:System.out.println("filas");:}
                |       col  {:System.out.println("columnas");:}
                |       confi {:System.out.println("confi");:}
                |       board  {:System.out.println("board");:} 
                |       targets {:System.out.println("targets");:}
                |       player {:System.out.println("player");:}
                |       boxes   {:System.out.println("boxes");:}
                ;

confi   ::=  COMILLAS CONFIG COMILLAS DOSPUNTOS LLAVEABIERTA nose LLAVECERRADA {::}
        ;

// CONFIGURACIONS        
nose    ::= nose COMA colore {::}
        |   colore{::}
        ;
        
colore  ::=     colorCajaFuera {::}
        |       colorAlamacen {::}
        |       colorCajaAlmacen {::}
        |       colorPared {::}
        |       colorCamino {::}
        |       noDefinido {::}
        |       colorJugador {::}
        ;


colorCajaFuera      ::=  COMILLAS BOX_COLOR COMILLAS  eHex:hexa {:colorCajaFuera.add(casteo(hexa));:}
                    ;

colorCajaAlmacen    ::= COMILLAS BOX_ONT_TAGET_COLOR COMILLAS  eHex:hexa {:colorCajasEnAlmacen.add(casteo(hexa));:}
                    ;

colorAlamacen       ::= COMILLAS TARGET_COLOR COMILLAS  eHex:hexa {:colorAlmace.add(casteo(hexa));:}
                    ;

colorPared          ::= COMILLAS BRICK_COLOR COMILLAS  eHex:hexa {:colorPared.add(casteo(hexa));:}
                    ;

colorCamino         ::= COMILLAS HALL_COLOR COMILLAS  eHex:hexa  {:colorCamino.add(casteo(hexa));:}
                    ;

noDefinido          ::= COMILLAS UNDEFINED_COLOR COMILLAS  eHex:hexa {:colorLugarNoDefinido.add(casteo(hexa));:}
                    ;

colorJugador        ::= COMILLAS COLOR_JUGADOR COMILLAS eHex:hexa {:colorJugador.add(casteo(hexa));:}
                    ;


eHex    ::= DOSPUNTOS COMILLAS HEXADECIMAL:hexa COMILLAS {:RESULT = hexa;:}
        ;

// POSICIONES DE PARED solucionar otra cosa
board   ::= COMILLAS BOARD COMILLAS DOSPUNTOS CORCHETEABIERTO algo CORCHETECERRADO {::}
        ;

algo    ::=     algomas COMA algo {::}
        |       algomas {::}
        ;

algomas ::=     LLAVEABIERTA otraCosa   LLAVECERRADA {:casillas.add(casillaTemp);
                                                        casillaTemp = new Casillas();:}
        ;

otraCosa    ::= otraCosa COMA info {::}
            |   info {::}
            ;
info    ::=     posEjes{::}
        |       tipo
        ;

posEjes ::=     COMILLAS POSX:posxx COMILLAS DOSPUNTOS opNum:n1 {:casillaTemp.setPosX(castEntero(n1));:}
        |       COMILLAS POSY:posyy COMILLAS DOSPUNTOS opNum:n1 {:casillaTemp.setPosY(castEntero(n1));:}
        ;
        
tipo1   ::=     COMILLAS TYPE COMILLAS DOSPUNTOS
        ;

tipo    ::=   COMILLAS TYPE COMILLAS DOSPUNTOS COMILLAS l COMILLAS {::}
        ;

l       ::=     BRICK:tip{:casillaTemp.setTipo(casteo(tip));:}
        |       HALL:tip{:casillaTemp.setTipo(casteo(tip));:}
        ;

 opNum  ::=    COMILLAS a:n1 COMILLAS {:RESULT = (double)n1;:}
        |       a:n1 {:RESULT = (double)n1;:}
        ;

//guardado para almacen 
targets ::=     COMILLAS TARGETS COMILLAS DOSPUNTOS CORCHETEABIERTO infoTarjeta CORCHETECERRADO {::}
        ;

infoTarjeta     ::=     estruct1 COMA infoTarjeta {::}
                |       estruct1 {::}
                ;

estruct1        ::=      LLAVEABIERTA infoExactaTarjeta LLAVECERRADA {:almacen.add(almacenTemo);
                        almacenTemo = new Almacen();:}
                ;

infoExactaTarjeta       ::=     posTarjeta COMA infoExactaTarjeta {::}
                        |       posTarjeta {::}
                        ;

posTarjeta      ::=     COMILLAS POSX COMILLAS DOSPUNTOS opNum:num {:almacenTemo.setPosX(castEntero(num));:}
                |       COMILLAS POSY COMILLAS DOSPUNTOS opNum:num {:almacenTemo.setPosY(castEntero(num));:}
                ;

//Posicion de jugador
player  ::=     COMILLAS PLAYER COMILLAS DOSPUNTOS LLAVEABIERTA posJugador LLAVECERRADA {:jugador1.add(jugadorTemp);
                jugadorTemp = new Jugador();:}
        ;

posJugador      ::=     posJugador COMA  ePosJ {::}
                |       ePosJ {::}
                ;

posXJ   ::=     COMILLAS POSX COMILLAS DOSPUNTOS opNum:num {:jugadorTemp.setPosX(castEntero(num));:}
        ;

posYJ   ::=     COMILLAS POSY COMILLAS DOSPUNTOS opNum:num {:jugadorTemp.setPosY(castEntero(num));:}
        ;

ePosJ   ::=     posXJ {::}
        |       posYJ {::}
        ;

//posicion de cajas 
boxes   ::=     COMILLAS BOXES COMILLAS DOSPUNTOS CORCHETEABIERTO box   CORCHETECERRADO
        ;

box     ::=     box COMA caja 
        |       caja
        ;

caja    ::=     LLAVEABIERTA posCaja LLAVECERRADA {:cajas.add(cajaTemp);
        cajaTemp = new Caja();:}
        ;

posCaja ::=     posCaja COMA posEjes1
        |       posEjes1
        ;
posEjes1        ::=     COMILLAS POSX:posxx COMILLAS DOSPUNTOS opNum:n1 {:cajaTemp.setPosX(castEntero(n1));:}
                |       COMILLAS POSY:posyy COMILLAS DOSPUNTOS opNum:n1 {:cajaTemp.setPosY(castEntero(n1));:}
                ;
//NUMERO
a ::=   a:n1 MAS b:n2 {:RESULT = (double)n1 +(double) n2;  :}
        | a:n1 MENOS b:n2 {: RESULT = (double)n1 - (double)n2; :}
        | b:n1 {: RESULT = n1; :}
        ;

b ::=   b:n1 MULTIPLICAR c:n2 {: RESULT = (double)n1 * (double)n2; :}
        | b:n1 DIAGONAL c:n2 {: RESULT = (double)n1/(double)n2; :}
        | MENOS c:n1 {: RESULT = -1 *(double) n1; :}
        | c:n1 {: RESULT = (double)n1; :}
        ;

c ::=   d:n1 POTENCIA c:n2 {: :}
        | d:n1 POTENCIA MENOS c:n2 {: :}
        | RAIZ PARENTESISABIERTO a:n1 PARENTESISCERRADO {::}
        | d:n1 {: RESULT = (double)n1; :}
        ;

d ::=   NUMERO:n1 {: RESULT = Double.valueOf(n1.toString());:}
        | DECIMAL:n1 {:RESULT = Double.valueOf(n1.toString());:}       
        | PARENTESISABIERTO a:n1 PARENTESISCERRADO {: RESULT = (double)n1; :}
        ;