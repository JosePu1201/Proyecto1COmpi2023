package com.mycompany.servidor_boxworold.lexer.cup;
import java_cup.runtime.*;
import java.util.*;
parser code {:


	public String casteo(Object o){
		String salida = "";
			try{
				salida = o.toString();
			}
			catch(Exception i){
				salida = "Error";
			}
		return salida;
	}
:};
//   
 terminal COMILLAS, DOSPUNTOS, COMA, NOMBRE, FILA, COLUMNA, ID,  NUMERO, HEXADECIMAL, LLAVEABIERTA, COLOR_JUGADOR, LLAVECERRADA, BRICK_COLOR, HALL_COLOR, UNDEFINED_COLOR, BOX_COLOR, BOX_ONT_TAGET_COLOR, TARGET_COLOR, 
BOARD, CORCHETEABIERTO, CORCHETECERRADO, POSX, POSY,TYPE, CONFIG,TARGETS,PLAYER,DECIMAL, MAS, MENOS, DIAGONAL,MULTIPLICAR,POTENCIA,PARENTESISCERRADO,PARENTESISABIERTO,RAIZ,HALL,BRICK,BOXES;

 non terminal inicio, desicion, nombre1 , col , filas, confi, nose, colorCajaFuera, colorCajaAlmacen, colorAlamacen, colorPared, colorCamino, noDefinido, colorJugador, colore, algo, otraCosa,tipo, opNum,
 info , board,targets, algomas,infoTarjeta, infoExactaTarjeta, posTarjeta, posJugador,ePosJ, posXJ,posYJ,player,a, b, c, d, decisiones,eHex,l,pos,posEjes;
non terminal tipo1,boxes,box,caja,posCaja;
//INICIO
 inicio ::= LLAVEABIERTA decisiones LLAVECERRADA{:System.out.println("termina todo :)");:}
            ;
//arreglar el tema de los numeros 
nombre1  ::=    COMILLAS NOMBRE COMILLAS DOSPUNTOS COMILLAS ID:id COMILLAS  {:System.out.println(casteo(id));:}
            ;
filas   ::=    COMILLAS FILA COMILLAS DOSPUNTOS COMILLAS opNum COMILLAS  {:System.out.println("entra fila");:}
            ;
col     ::=     COMILLAS COLUMNA COMILLAS DOSPUNTOS COMILLAS opNum COMILLAS  {:System.out.println("entra col");:}
            ;

decisiones      ::=     decisiones COMA desicion {:System.out.println("entra a decidir **** ");:}
                |       desicion {:System.out.println("entra a decidir final ");:}
                ;

desicion        ::=     nombre1 {::}
                |       filas {::}
                |       col  {::}
                |       confi {:System.out.println("TERMINA config");:}
                |       board  {:System.out.println("TERMINA board");:} 
                |       targets {:System.out.println("targets");:}
                |       player {:System.out.println("entra player");:}
                |       boxes
                ;

confi   ::=  COMILLAS CONFIG COMILLAS DOSPUNTOS LLAVEABIERTA nose LLAVECERRADA {:System.out.println("entra");:}
        ;

// CONFIGURACIONS        
nose    ::= nose COMA colore {:System.out.println("entra CON COMA?");:}
        |   colore{::}
        ;
        
colore  ::=     colorCajaFuera {:System.out.println("entra y terina caja fuera ");:}
        |       colorAlamacen {::}
        |       colorCajaAlmacen {::}
        |       colorPared {::}
        |       colorCamino {::}
        |       noDefinido {::}
        |       colorJugador {::}
        ;


colorCajaFuera      ::=  COMILLAS BOX_COLOR COMILLAS  eHex {::}
                    ;

colorCajaAlmacen    ::= COMILLAS BOX_ONT_TAGET_COLOR COMILLAS  eHex {::}
                    ;

colorAlamacen       ::= COMILLAS TARGET_COLOR COMILLAS  eHex {::}
                    ;

colorPared          ::= COMILLAS BRICK_COLOR COMILLAS  eHex {::}
                    ;

colorCamino         ::= COMILLAS HALL_COLOR COMILLAS  eHex  {::}
                    ;

noDefinido          ::= COMILLAS UNDEFINED_COLOR COMILLAS  eHex {::}
                    ;

colorJugador        ::= COMILLAS COLOR_JUGADOR COMILLAS eHex {::}
                    ;


eHex    ::= DOSPUNTOS COMILLAS HEXADECIMAL:hexa COMILLAS {:System.out.println(casteo(hexa));:}
        ;

// POSICIONES DE PARED solucionar otra cosa
board   ::= COMILLAS BOARD COMILLAS DOSPUNTOS CORCHETEABIERTO algo CORCHETECERRADO {::}
        ;

algo    ::=     algomas COMA algo {::}
        |       algomas {::}
        ;

algomas ::=     LLAVEABIERTA otraCosa   LLAVECERRADA 
        ;

otraCosa    ::= otraCosa COMA info {::}
            |   info {::}
            ;
info    ::=     posEjes{::}
        |       tipo
        ;

posEjes ::=     COMILLAS pos COMILLAS DOSPUNTOS opNum {::}
        ;
            
pos     ::=     POSX
        |       POSY  
        ;
tipo1   ::=     COMILLAS TYPE COMILLAS DOSPUNTOS
        ;

tipo    ::=   COMILLAS TYPE COMILLAS DOSPUNTOS COMILLAS l COMILLAS {:System.out.println("tipo1");:}
        ;

l       ::=     BRICK
        |       HALL
        ;

 opNum  ::=    COMILLAS a COMILLAS {::}
        |       a {::}
        ;

//guardado para almacen 
targets ::=     COMILLAS TARGETS COMILLAS DOSPUNTOS CORCHETEABIERTO infoTarjeta CORCHETECERRADO {::}
        ;

infoTarjeta     ::=     LLAVEABIERTA infoExactaTarjeta LLAVECERRADA COMA infoTarjeta {::}
                |       LLAVEABIERTA infoExactaTarjeta LLAVECERRADA {::}
                ;

infoExactaTarjeta       ::=     posTarjeta COMA infoExactaTarjeta {::}
                        |       posTarjeta {::}
                        ;

posTarjeta      ::=     COMILLAS POSX COMILLAS DOSPUNTOS opNum {::}
                |       COMILLAS POSY COMILLAS DOSPUNTOS opNum {::}
                ;

//Posicion de jugador
player  ::=     COMILLAS PLAYER COMILLAS DOSPUNTOS LLAVEABIERTA posJugador LLAVECERRADA {::}
        ;

posJugador      ::=     posJugador COMA  ePosJ {::}
                |       ePosJ {::}
                ;

posXJ   ::=     COMILLAS POSX COMILLAS DOSPUNTOS opNum {::}
        ;

posYJ   ::=     COMILLAS POSY COMILLAS DOSPUNTOS opNum {::}
        ;

ePosJ   ::=     posXJ {::}
        |       posYJ {::}
        ;

//posicion de cajas 
boxes   ::=     COMILLAS BOXES COMILLAS DOSPUNTOS CORCHETEABIERTO box   CORCHETECERRADO
        ;

box     ::=     box COMA caja 
        |       caja
        ;

caja    ::=     LLAVEABIERTA posCaja LLAVECERRADA
        ;

posCaja ::=     posCaja COMA posEjes
        |       posEjes
        ;
//NUMERO
a ::=   a:n1 MAS b:n2 {:/*RESULT = n1 + n2;*/  :}
        | a:n1 MENOS b:n2 {: /*RESULT = n1 - n2; */:}
        | b:n1 {: /*RESULT = n1; */:}
        ;

b ::=   b:n1 MULTIPLICAR c:n2 {: /*RESULT = n1 * n2;*/ :}
        | b:n1 DIAGONAL c:n2 {: /*RESULT = n1; */:}
        | MENOS c:n1 {: /*RESULT = -1 * n1;*/ :}
        | c:n1 {: /*RESULT = n1;*/ :}
        ;

c ::=   d:n1 POTENCIA c:n2 {: /*RESULT = (int) Math.pow(n1, n2);*/ :}
        | d:n1 POTENCIA MENOS c:n2 {: /*RESULT = (int) Math.pow(n1, -1 * n2); */:}
        | RAIZ PARENTESISABIERTO a:n1 PARENTESISCERRADO {: /*RESULT = (int) Math.sqrt(n1);*/ :}
        | d:n1 {: /*RESULT = n1;*/ :}
        ;

d ::=   NUMERO:n1 {: /*RESULT = Integer.valueOf(n1.getValue());*/ :}
        | PARENTESISABIERTO a:n1 PARENTESISCERRADO {: /*RESULT = n1;*/ :}
        ;