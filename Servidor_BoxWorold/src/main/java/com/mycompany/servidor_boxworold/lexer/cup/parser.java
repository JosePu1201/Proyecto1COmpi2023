
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.mycompany.servidor_boxworold.lexer.cup;

import com.mycompany.servidor_boxworold.Juego.*;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\005\000\002\002\004\000\002\004" +
    "\011\000\002\006\011\000\002\005\011\000\002\045\005" +
    "\000\002\045\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\007" +
    "\011\000\002\010\005\000\002\010\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\011\006\000\002\012\006\000\002\013\006\000\002\014" +
    "\006\000\002\015\006\000\002\016\006\000\002\017\006" +
    "\000\002\046\006\000\002\026\011\000\002\021\005\000" +
    "\002\021\003\000\002\030\005\000\002\022\005\000\002" +
    "\022\003\000\002\025\003\000\002\025\003\000\002\051" +
    "\007\000\002\051\007\000\002\052\006\000\002\023\011" +
    "\000\002\047\003\000\002\047\003\000\002\024\005\000" +
    "\002\024\003\000\002\027\011\000\002\031\005\000\002" +
    "\031\003\000\002\057\005\000\002\032\005\000\002\032" +
    "\003\000\002\033\007\000\002\033\007\000\002\040\011" +
    "\000\002\034\005\000\002\034\003\000\002\036\007\000" +
    "\002\037\007\000\002\035\003\000\002\035\003\000\002" +
    "\053\011\000\002\054\005\000\002\054\003\000\002\055" +
    "\005\000\002\056\005\000\002\056\003\000\002\060\007" +
    "\000\002\060\007\000\002\041\005\000\002\041\005\000" +
    "\002\041\003\000\002\042\005\000\002\042\005\000\002" +
    "\042\004\000\002\042\003\000\002\043\005\000\002\043" +
    "\006\000\002\043\006\000\002\043\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\015\004\001\002\000\004\004\020\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\006\006\322\017\323\001\002\000\006\006\ufffa\017" +
    "\ufffa\001\002\000\006\006\ufff8\017\ufff8\001\002\000\006" +
    "\006\ufff7\017\ufff7\001\002\000\006\006\ufff3\017\ufff3\001" +
    "\002\000\006\006\ufff9\017\ufff9\001\002\000\006\006\ufff5" +
    "\017\ufff5\001\002\000\006\006\ufffb\017\ufffb\001\002\000" +
    "\006\006\ufff6\017\ufff6\001\002\000\022\007\031\010\023" +
    "\011\027\026\026\034\022\035\030\036\024\052\025\001" +
    "\002\000\006\006\ufff4\017\ufff4\001\002\000\004\004\251" +
    "\001\002\000\004\004\244\001\002\000\004\004\221\001" +
    "\002\000\004\004\172\001\002\000\004\004\131\001\002" +
    "\000\004\004\124\001\002\000\004\004\037\001\002\000" +
    "\004\004\032\001\002\000\004\005\033\001\002\000\004" +
    "\004\034\001\002\000\004\012\035\001\002\000\004\004" +
    "\036\001\002\000\006\006\uffff\017\uffff\001\002\000\004" +
    "\005\040\001\002\000\004\027\041\001\002\000\004\015" +
    "\044\001\002\000\004\030\123\001\002\000\006\006\121" +
    "\030\uffce\001\002\000\004\004\047\001\002\000\006\006" +
    "\117\017\uffcb\001\002\000\004\017\116\001\002\000\006" +
    "\031\051\032\050\001\002\000\004\004\113\001\002\000" +
    "\004\004\052\001\002\000\004\005\053\001\002\000\016" +
    "\004\063\013\060\037\054\041\056\046\055\047\057\001" +
    "\002\000\024\004\uffad\006\uffad\017\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\001\002\000\014\013" +
    "\060\037\054\041\056\046\055\047\057\001\002\000\012" +
    "\013\060\037\054\046\055\047\057\001\002\000\004\046" +
    "\105\001\002\000\024\004\uffae\006\uffae\017\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\001\002\000" +
    "\006\006\uffca\017\uffca\001\002\000\024\004\uffaf\006\uffaf" +
    "\017\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\101\045" +
    "\uffaf\001\002\000\014\013\060\037\054\041\056\046\055" +
    "\047\057\001\002\000\022\004\uffb3\006\uffb3\017\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\045\uffb3\001\002\000\022" +
    "\004\uffb7\006\uffb7\017\uffb7\040\uffb7\041\uffb7\042\073\043" +
    "\072\045\uffb7\001\002\000\014\004\uffd1\006\uffd1\017\uffd1" +
    "\040\067\041\070\001\002\000\014\013\060\037\054\041" +
    "\056\046\055\047\057\001\002\000\014\013\060\037\054" +
    "\041\056\046\055\047\057\001\002\000\022\004\uffb8\006" +
    "\uffb8\017\uffb8\040\uffb8\041\uffb8\042\073\043\072\045\uffb8" +
    "\001\002\000\012\013\060\037\054\046\055\047\057\001" +
    "\002\000\012\013\060\037\054\046\055\047\057\001\002" +
    "\000\022\004\uffb5\006\uffb5\017\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\045\uffb5\001\002\000\022\004\uffb6\006\uffb6" +
    "\017\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\045\uffb6\001" +
    "\002\000\022\004\uffb9\006\uffb9\017\uffb9\040\uffb9\041\uffb9" +
    "\042\073\043\072\045\uffb9\001\002\000\010\004\100\040" +
    "\067\041\070\001\002\000\010\004\uffd2\006\uffd2\017\uffd2" +
    "\001\002\000\014\013\060\037\054\041\102\046\055\047" +
    "\057\001\002\000\012\013\060\037\054\046\055\047\057" +
    "\001\002\000\022\004\uffb2\006\uffb2\017\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\045\uffb2\001\002\000\022\004\uffb1" +
    "\006\uffb1\017\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\045" +
    "\uffb1\001\002\000\014\013\060\037\054\041\056\046\055" +
    "\047\057\001\002\000\010\040\067\041\070\045\107\001" +
    "\002\000\022\004\uffb0\006\uffb0\017\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\045\uffb0\001\002\000\022\004\uffb4\006" +
    "\uffb4\017\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\045\uffb4" +
    "\001\002\000\010\040\067\041\070\045\112\001\002\000" +
    "\024\004\uffac\006\uffac\017\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\001\002\000\004\005\114\001" +
    "\002\000\016\004\063\013\060\037\054\041\056\046\055" +
    "\047\057\001\002\000\006\006\uffc9\017\uffc9\001\002\000" +
    "\006\006\uffcd\030\uffcd\001\002\000\004\004\047\001\002" +
    "\000\004\017\uffcc\001\002\000\004\015\044\001\002\000" +
    "\004\030\uffcf\001\002\000\006\006\uffd0\017\uffd0\001\002" +
    "\000\004\005\125\001\002\000\004\004\126\001\002\000" +
    "\016\004\063\013\060\037\054\041\056\046\055\047\057" +
    "\001\002\000\004\004\130\001\002\000\006\006\ufffd\017" +
    "\ufffd\001\002\000\004\005\132\001\002\000\004\027\133" +
    "\001\002\000\004\015\135\001\002\000\006\006\170\030" +
    "\uffde\001\002\000\004\004\144\001\002\000\004\030\137" +
    "\001\002\000\006\006\uffe0\017\uffe0\001\002\000\006\006" +
    "\uffda\017\uffda\001\002\000\006\006\165\017\166\001\002" +
    "\000\006\006\uffd9\017\uffd9\001\002\000\006\006\uffdb\017" +
    "\uffdb\001\002\000\010\031\146\032\145\033\147\001\002" +
    "\000\004\004\162\001\002\000\004\004\157\001\002\000" +
    "\004\004\150\001\002\000\004\005\151\001\002\000\004" +
    "\004\152\001\002\000\006\050\155\051\154\001\002\000" +
    "\004\004\156\001\002\000\004\004\uffd4\001\002\000\004" +
    "\004\uffd3\001\002\000\006\006\uffd5\017\uffd5\001\002\000" +
    "\004\005\160\001\002\000\016\004\063\013\060\037\054" +
    "\041\056\046\055\047\057\001\002\000\006\006\uffd8\017" +
    "\uffd8\001\002\000\004\005\163\001\002\000\016\004\063" +
    "\013\060\037\054\041\056\046\055\047\057\001\002\000" +
    "\006\006\uffd7\017\uffd7\001\002\000\004\004\144\001\002" +
    "\000\006\006\uffdd\030\uffdd\001\002\000\006\006\uffdc\017" +
    "\uffdc\001\002\000\004\015\135\001\002\000\004\030\uffdf" +
    "\001\002\000\004\005\173\001\002\000\004\027\174\001" +
    "\002\000\004\015\177\001\002\000\006\006\uffbf\030\uffbf" +
    "\001\002\000\006\006\216\030\217\001\002\000\004\004" +
    "\202\001\002\000\006\006\213\017\214\001\002\000\006" +
    "\006\uffbc\017\uffbc\001\002\000\006\031\204\032\203\001" +
    "\002\000\004\004\210\001\002\000\004\004\205\001\002" +
    "\000\004\005\206\001\002\000\016\004\063\013\060\037" +
    "\054\041\056\046\055\047\057\001\002\000\006\006\uffbb" +
    "\017\uffbb\001\002\000\004\005\211\001\002\000\016\004" +
    "\063\013\060\037\054\041\056\046\055\047\057\001\002" +
    "\000\006\006\uffba\017\uffba\001\002\000\004\004\202\001" +
    "\002\000\006\006\uffbe\030\uffbe\001\002\000\006\006\uffbd" +
    "\017\uffbd\001\002\000\004\015\177\001\002\000\006\006" +
    "\uffc1\017\uffc1\001\002\000\006\006\uffc0\030\uffc0\001\002" +
    "\000\004\005\222\001\002\000\004\015\223\001\002\000" +
    "\004\004\230\001\002\000\006\006\uffc6\017\uffc6\001\002" +
    "\000\006\006\241\017\242\001\002\000\006\006\uffc3\017" +
    "\uffc3\001\002\000\006\006\uffc2\017\uffc2\001\002\000\006" +
    "\031\232\032\231\001\002\000\004\004\236\001\002\000" +
    "\004\004\233\001\002\000\004\005\234\001\002\000\016" +
    "\004\063\013\060\037\054\041\056\046\055\047\057\001" +
    "\002\000\006\006\uffc5\017\uffc5\001\002\000\004\005\237" +
    "\001\002\000\016\004\063\013\060\037\054\041\056\046" +
    "\055\047\057\001\002\000\006\006\uffc4\017\uffc4\001\002" +
    "\000\004\004\230\001\002\000\006\006\uffc8\017\uffc8\001" +
    "\002\000\006\006\uffc7\017\uffc7\001\002\000\004\005\245" +
    "\001\002\000\004\004\246\001\002\000\016\004\063\013" +
    "\060\037\054\041\056\046\055\047\057\001\002\000\004" +
    "\004\250\001\002\000\006\006\ufffe\017\ufffe\001\002\000" +
    "\004\005\252\001\002\000\004\015\253\001\002\000\004" +
    "\004\263\001\002\000\006\006\317\017\320\001\002\000" +
    "\006\006\uffee\017\uffee\001\002\000\006\006\uffef\017\uffef" +
    "\001\002\000\006\006\uffed\017\uffed\001\002\000\006\006" +
    "\uffea\017\uffea\001\002\000\006\006\uffe9\017\uffe9\001\002" +
    "\000\006\006\uffec\017\uffec\001\002\000\020\016\271\020" +
    "\267\021\266\022\273\023\270\024\274\025\272\001\002" +
    "\000\006\006\ufff0\017\ufff0\001\002\000\006\006\uffeb\017" +
    "\uffeb\001\002\000\004\004\315\001\002\000\004\004\313" +
    "\001\002\000\004\004\311\001\002\000\004\004\307\001" +
    "\002\000\004\004\305\001\002\000\004\004\303\001\002" +
    "\000\004\004\275\001\002\000\004\005\276\001\002\000" +
    "\004\004\300\001\002\000\006\006\uffe7\017\uffe7\001\002" +
    "\000\004\014\301\001\002\000\004\004\302\001\002\000" +
    "\006\006\uffe1\017\uffe1\001\002\000\004\005\276\001\002" +
    "\000\006\006\uffe3\017\uffe3\001\002\000\004\005\276\001" +
    "\002\000\006\006\uffe6\017\uffe6\001\002\000\004\005\276" +
    "\001\002\000\006\006\uffe2\017\uffe2\001\002\000\004\005" +
    "\276\001\002\000\006\006\uffe8\017\uffe8\001\002\000\004" +
    "\005\276\001\002\000\006\006\uffe5\017\uffe5\001\002\000" +
    "\004\005\276\001\002\000\006\006\uffe4\017\uffe4\001\002" +
    "\000\004\004\263\001\002\000\006\006\ufff2\017\ufff2\001" +
    "\002\000\006\006\ufff1\017\ufff1\001\002\000\004\004\020" +
    "\001\002\000\004\002\001\001\002\000\006\006\ufffc\017" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\002\004\001\001\000\026\003\015\004" +
    "\007\005\010\006\013\007\011\026\016\027\014\040\020" +
    "\045\006\053\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\041\057\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\045\033\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\024" +
    "\060\041\065\042\064\043\063\044\061\001\001\000\002" +
    "\001\001\000\012\041\110\042\064\043\063\044\061\001" +
    "\001\000\006\043\107\044\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\041\076\042\064\043\063\044\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\075\043\063\044\061\001\001\000\010\042\070\043\063" +
    "\044\061\001\001\000\002\001\001\000\006\043\074\044" +
    "\061\001\001\000\006\043\073\044\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\102\044\061\001\001" +
    "\000\006\043\103\044\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\041\105\042\064\043\063\044\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\114\041\065\042\064\043\063\044\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\117" +
    "\033\044\001\001\000\002\001\001\000\006\031\121\057" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\126\041\065\042" +
    "\064\043\063\044\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\135\030\133\001\001\000\002\001\001\000\012\022\140" +
    "\023\141\025\142\051\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\024\160\041\065\042\064\043" +
    "\063\044\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\163\041\065\042\064\043\063\044\061\001" +
    "\001\000\002\001\001\000\010\023\141\025\166\051\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\170\030\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\054\175\055\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\177\060\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\206\041\065\042\064\043\063\044\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\024\211" +
    "\041\065\042\064\043\063\044\061\001\001\000\002\001" +
    "\001\000\004\060\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\034\224\035\223\036\225\037\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\234\041\065\042\064\043\063" +
    "\044\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\024\237\041\065\042\064\043\063\044\061\001\001" +
    "\000\002\001\001\000\010\035\242\036\225\037\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\024\246\041\065\042\064\043" +
    "\063\044\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\253\011" +
    "\255\012\256\013\254\014\261\015\264\016\257\017\260" +
    "\020\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\303\001\001" +
    "\000\002\001\001\000\004\046\305\001\001\000\002\001" +
    "\001\000\004\046\307\001\001\000\002\001\001\000\004" +
    "\046\311\001\001\000\002\001\001\000\004\046\313\001" +
    "\001\000\002\001\001\000\004\046\315\001\001\000\002" +
    "\001\001\000\022\011\255\012\256\013\254\014\261\015" +
    "\264\016\257\017\260\020\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\323\004\007\005\010\006" +
    "\013\007\011\026\016\027\014\040\020\053\012\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        public ArrayList<String> nombre  = new ArrayList<>(); ;
	public ArrayList<Integer> filas = new ArrayList<>();;
	public ArrayList<Integer> columnas = new ArrayList<>();;
	public ArrayList<String> colorCajaFuera  = new ArrayList<>();// "#ffff00";
	public ArrayList<String> colorCajasEnAlmacen  = new ArrayList<>();// "#fe0002";
	public ArrayList<String> colorAlmace  = new ArrayList<>();// "#d6fe0a";
	public ArrayList<String> colorPared  = new ArrayList<>();// "#bdbebf";
	public ArrayList<String> colorCamino  = new ArrayList<>();// "#0001ff";
	public ArrayList<String> colorLugarNoDefinido  = new ArrayList<>();// "#303030";
	public ArrayList<String> colorJugador  = new ArrayList<>();// "#ff00f7";
	public ArrayList<Jugador> jugador1 = new ArrayList<>();;
	public ArrayList<Caja> cajas = new ArrayList<>();
	public ArrayList<Almacen> almacen = new ArrayList<>();
	public ArrayList<Casillas> casillas = new ArrayList<>();
        public Mundo mundoTemp = new Mundo();

        Casillas casillaTemp = new Casillas();
        Caja cajaTemp = new Caja();
        Almacen almacenTemo = new Almacen();
        Jugador jugadorTemp = new Jugador();
        public void set(){
            mundoTemp.setAlmacen(almacen);
            mundoTemp.setCajas(cajas);
            mundoTemp.setColorAlmace(colorAlmace);
            mundoTemp.setColorCajaFuera(colorCajaFuera);
            mundoTemp.setColorCajasEnAlmacen(colorCajasEnAlmacen);
            mundoTemp.setColorCamino(colorCamino);
            mundoTemp.setColorJugador(colorJugador);
            mundoTemp.setColorLugarNoDefinido(colorLugarNoDefinido);
            mundoTemp.setColorPared(colorPared);
            mundoTemp.setColumnas(columnas);
            mundoTemp.setFilas(filas);
            mundoTemp.setJugador(jugador1);
            mundoTemp.setNombre(nombre);
            mundoTemp.setCasillas(casillas);
            mundoTemp.returnWorold();
        }
        public int castEntero(Object a){
                int num = -1;
                      	try{
				double numa = Double.parseDouble(casteo(a));
                                num = (int) numa;
			}
			catch(Exception i){
                                System.out.println("no se pudo y l");              
			}  
                return num;
        }
                public void imprimir(){
            imprimirArray(nombre);
            imprimirArray(colorCajaFuera);
            imprimirArray(colorCajasEnAlmacen);
            imprimirArray(colorAlmace);
            imprimirArray(colorPared);
            imprimirArray(colorCamino);
            imprimirArray(colorLugarNoDefinido);
            imprimirArray(colorJugador);
            imprimirInteger(filas);
            imprimirInteger(columnas);
            
            for (Jugador object : jugador1) {
                    System.err.println(object.toString());
            }
            for (Caja caja : cajas) {
                System.err.println(caja.toString());
            }
            for (Almacen almacen1 : almacen) {
                System.err.println(almacen1.toString());
            }
            for (Casillas casilla : casillas) {
                System.err.println(casilla.toString());
            }
            
        }
        public void imprimirInteger(ArrayList<Integer> entrada){
                for (
                        Integer object : entrada) {
                        System.out.println(object);
                }

        }
        public void imprimirArray(ArrayList<String> entrada){
        
            for (String object : entrada) {
                System.out.println(object);
            }
            
        }
	public String casteo(Object o){
		String salida = "";
			try{
				salida = o.toString();
			}
			catch(Exception i){
				salida = "Error";
			}
		return salida;
	}

        public double casteoNumero(Object num) {
                double numero = 0;
                try {
                        String numeroE = num.toString();
                        numero = Double.parseDouble(numeroE);
                } catch (Exception i) {
                        System.err.println("error");
                }

                return numero;

        }
        private Integer casteoInteger (Object num){
                Integer numero = 0;
                try {
                        String numeroE = num.toString();
                        numero = Integer.valueOf(numeroE);
                } catch (Exception i) {
                        System.err.println("error");
                }

                return numero;
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= LLAVEABIERTA decisiones LLAVECERRADA 
            {
              Object RESULT =null;
		/*imprimir();*/set();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nombre1 ::= COMILLAS NOMBRE COMILLAS DOSPUNTOS COMILLAS ID COMILLAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		nombre.add(casteo(id));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nombre1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // filas ::= COMILLAS FILA COMILLAS DOSPUNTOS COMILLAS opNum COMILLAS 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		filas.add(castEntero(numero));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // col ::= COMILLAS COLUMNA COMILLAS DOSPUNTOS COMILLAS opNum COMILLAS 
            {
              Object RESULT =null;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		columnas.add(castEntero(numero));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("col",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decisiones ::= decisiones COMA desicion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decisiones",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decisiones ::= desicion 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decisiones",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // desicion ::= nombre1 
            {
              Object RESULT =null;
		System.out.println("nombre");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("desicion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // desicion ::= filas 
            {
              Object RESULT =null;
		System.out.println("filas");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("desicion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // desicion ::= col 
            {
              Object RESULT =null;
		System.out.println("columnas");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("desicion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // desicion ::= confi 
            {
              Object RESULT =null;
		System.out.println("confi");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("desicion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // desicion ::= board 
            {
              Object RESULT =null;
		System.out.println("board");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("desicion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // desicion ::= targets 
            {
              Object RESULT =null;
		System.out.println("targets");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("desicion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // desicion ::= player 
            {
              Object RESULT =null;
		System.out.println("player");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("desicion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // desicion ::= boxes 
            {
              Object RESULT =null;
		System.out.println("boxes");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("desicion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // confi ::= COMILLAS CONFIG COMILLAS DOSPUNTOS LLAVEABIERTA nose LLAVECERRADA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("confi",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nose ::= nose COMA colore 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nose ::= colore 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nose",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // colore ::= colorCajaFuera 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colore",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // colore ::= colorAlamacen 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colore",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // colore ::= colorCajaAlmacen 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colore",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // colore ::= colorPared 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colore",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // colore ::= colorCamino 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colore",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // colore ::= noDefinido 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colore",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // colore ::= colorJugador 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colore",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // colorCajaFuera ::= COMILLAS BOX_COLOR COMILLAS eHex 
            {
              Object RESULT =null;
		int hexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hexa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		colorCajaFuera.add(casteo(hexa));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colorCajaFuera",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // colorCajaAlmacen ::= COMILLAS BOX_ONT_TAGET_COLOR COMILLAS eHex 
            {
              Object RESULT =null;
		int hexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hexa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		colorCajasEnAlmacen.add(casteo(hexa));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colorCajaAlmacen",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // colorAlamacen ::= COMILLAS TARGET_COLOR COMILLAS eHex 
            {
              Object RESULT =null;
		int hexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hexa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		colorAlmace.add(casteo(hexa));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colorAlamacen",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // colorPared ::= COMILLAS BRICK_COLOR COMILLAS eHex 
            {
              Object RESULT =null;
		int hexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hexa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		colorPared.add(casteo(hexa));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colorPared",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // colorCamino ::= COMILLAS HALL_COLOR COMILLAS eHex 
            {
              Object RESULT =null;
		int hexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hexa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		colorCamino.add(casteo(hexa));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colorCamino",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // noDefinido ::= COMILLAS UNDEFINED_COLOR COMILLAS eHex 
            {
              Object RESULT =null;
		int hexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hexa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		colorLugarNoDefinido.add(casteo(hexa));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("noDefinido",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // colorJugador ::= COMILLAS COLOR_JUGADOR COMILLAS eHex 
            {
              Object RESULT =null;
		int hexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hexa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		colorJugador.add(casteo(hexa));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colorJugador",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // eHex ::= DOSPUNTOS COMILLAS HEXADECIMAL COMILLAS 
            {
              Object RESULT =null;
		int hexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hexa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = hexa;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eHex",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // board ::= COMILLAS BOARD COMILLAS DOSPUNTOS CORCHETEABIERTO algo CORCHETECERRADO 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("board",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // algo ::= algomas COMA algo 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // algo ::= algomas 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // algomas ::= LLAVEABIERTA otraCosa LLAVECERRADA 
            {
              Object RESULT =null;
		casillas.add(casillaTemp);
                                                        casillaTemp = new Casillas();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("algomas",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // otraCosa ::= otraCosa COMA info 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otraCosa",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // otraCosa ::= info 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("otraCosa",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // info ::= posEjes 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("info",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // info ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("info",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // posEjes ::= COMILLAS POSX COMILLAS DOSPUNTOS opNum 
            {
              Object RESULT =null;
		int posxxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posxxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object posxx = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		casillaTemp.setPosX(castEntero(n1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posEjes",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // posEjes ::= COMILLAS POSY COMILLAS DOSPUNTOS opNum 
            {
              Object RESULT =null;
		int posyyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posyyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object posyy = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		casillaTemp.setPosY(castEntero(n1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posEjes",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo1 ::= COMILLAS TYPE COMILLAS DOSPUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo1",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo ::= COMILLAS TYPE COMILLAS DOSPUNTOS COMILLAS l COMILLAS 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // l ::= BRICK 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		casillaTemp.setTipo(casteo(tip));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // l ::= HALL 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		casillaTemp.setTipo(casteo(tip));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opNum ::= COMILLAS a COMILLAS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = (double)n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opNum",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opNum ::= a 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (double)n1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opNum",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // targets ::= COMILLAS TARGETS COMILLAS DOSPUNTOS CORCHETEABIERTO infoTarjeta CORCHETECERRADO 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("targets",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // infoTarjeta ::= estruct1 COMA infoTarjeta 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTarjeta",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // infoTarjeta ::= estruct1 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoTarjeta",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estruct1 ::= LLAVEABIERTA infoExactaTarjeta LLAVECERRADA 
            {
              Object RESULT =null;
		almacen.add(almacenTemo);
                        almacenTemo = new Almacen();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estruct1",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // infoExactaTarjeta ::= posTarjeta COMA infoExactaTarjeta 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoExactaTarjeta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // infoExactaTarjeta ::= posTarjeta 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("infoExactaTarjeta",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // posTarjeta ::= COMILLAS POSX COMILLAS DOSPUNTOS opNum 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		almacenTemo.setPosX(castEntero(num));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posTarjeta",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // posTarjeta ::= COMILLAS POSY COMILLAS DOSPUNTOS opNum 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		almacenTemo.setPosY(castEntero(num));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posTarjeta",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // player ::= COMILLAS PLAYER COMILLAS DOSPUNTOS LLAVEABIERTA posJugador LLAVECERRADA 
            {
              Object RESULT =null;
		jugador1.add(jugadorTemp);
                jugadorTemp = new Jugador();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("player",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // posJugador ::= posJugador COMA ePosJ 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posJugador",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // posJugador ::= ePosJ 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posJugador",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // posXJ ::= COMILLAS POSX COMILLAS DOSPUNTOS opNum 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		jugadorTemp.setPosX(castEntero(num));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posXJ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // posYJ ::= COMILLAS POSY COMILLAS DOSPUNTOS opNum 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		jugadorTemp.setPosY(castEntero(num));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posYJ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ePosJ ::= posXJ 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ePosJ",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ePosJ ::= posYJ 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ePosJ",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // boxes ::= COMILLAS BOXES COMILLAS DOSPUNTOS CORCHETEABIERTO box CORCHETECERRADO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boxes",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // box ::= box COMA caja 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("box",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // box ::= caja 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("box",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // caja ::= LLAVEABIERTA posCaja LLAVECERRADA 
            {
              Object RESULT =null;
		cajas.add(cajaTemp);
        cajaTemp = new Caja();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caja",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // posCaja ::= posCaja COMA posEjes1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("posCaja",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // posCaja ::= posEjes1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("posCaja",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // posEjes1 ::= COMILLAS POSX COMILLAS DOSPUNTOS opNum 
            {
              Object RESULT =null;
		int posxxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posxxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object posxx = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cajaTemp.setPosX(castEntero(n1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posEjes1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // posEjes1 ::= COMILLAS POSY COMILLAS DOSPUNTOS opNum 
            {
              Object RESULT =null;
		int posyyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int posyyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object posyy = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		cajaTemp.setPosY(castEntero(n1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("posEjes1",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // a ::= a MAS b 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (double)n1 +(double) n2;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // a ::= a MENOS b 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (double)n1 - (double)n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // a ::= b 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // b ::= b MULTIPLICAR c 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (double)n1 * (double)n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // b ::= b DIAGONAL c 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (double)n1/(double)n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // b ::= MENOS c 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = -1 *(double) n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // b ::= c 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (double)n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("b",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // c ::= d POTENCIA c 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // c ::= d POTENCIA MENOS c 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // c ::= RAIZ PARENTESISABIERTO a PARENTESISCERRADO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // c ::= d 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (double)n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // d ::= NUMERO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Double.valueOf(n1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // d ::= DECIMAL 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = Double.valueOf(n1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // d ::= PARENTESISABIERTO a PARENTESISCERRADO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (double)n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
